#!/bin/bash

#1.user-configuration

#print welcome message when the installer starts
welcome_msg() {
    #print ASCII and installix info
    echo -e "
----------------------------------------------------------
 ██                    ██              ██  ██ ██
░░                    ░██             ░██ ░██░░
 ██ ███████   ██████ ██████  ██████   ░██ ░██ ██ ██   ██
░██░░██░░░██ ██░░░░ ░░░██░  ░░░░░░██  ░██ ░██░██░░██ ██
░██ ░██  ░██░░█████   ░██    ███████  ░██ ░██░██ ░░███
░██ ░██  ░██ ░░░░░██  ░██   ██░░░░██  ░██ ░██░██  ██░██
░██ ███  ░██ ██████   ░░██ ░░████████ ███ ███░██ ██ ░░██
░░ ░░░   ░░ ░░░░░░     ░░   ░░░░░░░░ ░░░ ░░░ ░░ ░░   ░░
----------------------------------------------------------
             Automated Linux Installer Script                 
----------------------------------------------------------
     Repo: https://github.com/antenehbedilu/installix                      
"
}

#set console keyboard layout
set_keymap() {
    #prompt user to change keyboard layout/set keymap
    read -p "Skip - use the default keyboard layout US [Y/n]:  " response
    #use the default console keymap as "us"
    if [[ $response =~ ^[Yy]$ || -z $response ]]; then
	#set keymap to "us" for current session and exit function
	keymap="us"; return
    #set different keymap
    else
        #list available keymaps and accept users keymap input for the current session
        PS3="Please select your keyboard layout: "
        options=("us USA" "by Belarus" "ca Canada" "cf Canada French" "cz Czechia" "de German" "dk Denmark" "es Spain" "fi Finnish" "fr France" "gr Greece" "hu Hungary" "ie Ireland" "il Israel" "is Italy" "it Italy" "jp Japan" "lt Lithuania" "lv Latvia" "mk Macedonia" "nl Netherlands" "no Norway" "pl Poland" "pt Portugal" "ro Romania" "ru Russia" "se Sweden" "sg Swiss German" "tr Turkey" "ua Ukraine" "uk United Kingdom" "Quit")
        select option in "${options[@]}"
        do
            case $REPLY in
                #set keymap for the current session
                1) keymap="us"; loadkeys $keymap; break ;;
                2) keymap="by"; loadkeys $keymap; break ;;
                3) keymap="ca"; loadkeys $keymap; break ;;
                4) keymap="cf"; loadkeys $keymap; break ;;
                5) keymap="cz"; loadkeys $keymap; break ;;
                6) keymap="de"; loadkeys $keymap; break ;;
                7) keymap="dk"; loadkeys $keymap; break ;;
                8) keymap="es"; loadkeys $keymap; break ;;
                9) keymap="fi"; loadkeys $keymap; break ;;
                10) keymap="fr"; loadkeys $keymap; break ;;
                11) keymap="gr"; loadkeys $keymap; break ;;
                12) keymap="hu"; loadkeys $keymap; break ;;
                13) keymap="ie"; loadkeys $keymap; break ;;
                14) keymap="il"; loadkeys $keymap; break ;;
                15) keymap="is"; loadkeys $keymap; break ;;
                16) keymap="it"; loadkeys $keymap; break ;;
                17) keymap="jp106"; loadkeys $keymap; break ;;
                18) keymap="lt"; loadkeys $keymap; break ;;
                19) keymap="lv"; loadkeys $keymap; break ;;
                20) keymap="mk"; loadkeys $keymap; break ;;
                21) keymap="nl"; loadkeys $keymap; break ;;
                22) keymap="no"; loadkeys $keymap; break ;;
                23) keymap="pl"; loadkeys $keymap; break ;;
                24) keymap="pt-latin1"; loadkeys $keymap; break ;;
                25) keymap="ro"; loadkeys $keymap; break ;;
                26) keymap="ru"; loadkeys $keymap; break ;;
                27) keymap="se-lat6"; loadkeys $keymap; break ;;
                28) keymap="sg"; loadkeys $keymap; break ;;
                29) keymap="tr"; loadkeys $keymap; break ;;
                30) keymap="ua"; loadkeys $keymap; break ;;
                31) keymap="uk"; loadkeys $keymap; break ;;
                #skip setting keymap for the current session
                32) break ;;
                #if user input is not valid, then prompt user to select keymaps
		*) echo "Invalid option $REPLY, Please try again." ;;
            esac
        done
    fi
}

#check network connection of the live environment
check_internet() {
	#ping cloudflare public DNS
	ping -c 1 1.1.1.1 > /dev/null
	#if the exit status of the ping command is equal to 0; which indicates that the command executed successfully with out any errors or issues
	if [ $? -eq 0 ]; then
		echo "Internet access is available."
	#else the ping command encountered an error
	else
		echo -e "Internet is not available.\nConnect to the network:\n\t1.Ethernet - plug in the cable.\n\t2.Wi-Fi - authenticate to the wireless network using iwctl utility.\n\t3.Mobile broadband modem - connect to the mobile network with the mmcli utility."
		#exit the installation script
		exit 1
	fi
}

#set localization
set_locale() {
    #prompt user to select locales; so in the future we can set language
    PS3="Please select locale language : "
    options=("English - United States" "Amharic - Ethiopia" "Arabic - United Arab Emirates" "Danish - Denmark" "Dutch - Netherlands" "French - France" "German - Germany" "Italian - Italy" "Japanese - Japan" "Korean - Korea" "Malay - Malaysia" "Polish - Poland" "Romanian - Romania" "Russian - Russia" "Simplified Chinese - China" "Spanish - Spain" "Swedish - Sweden" "Traditional Chinese - China" "Turkish - Turkey" "Quit")
    select option in "${options[@]}"
    do
        case $option in
            #save selected locale to a variable for future use
            "English - United States") locale="en_US.UTF-8"; break ;;
            "Amharic - Ethiopia") locale="am_ET"; break ;;
            "Arabic - United Arab Emirates") locale="ar_AE.UTF-8"; break ;;
            "Danish - Denmark") locale="da_DK.UTF-8"; break ;;
            "Dutch - Netherlands") locale="nl_NL.UTF-8"; break ;;
            "French - France") locale="fr_FR.UTF-8"; break ;;
            "German - Germany") locale="de_DE.UTF-8"; break ;;
            "Italian - Italy") locale="it_IT.UTF-8"; break ;;
            "Japanese - Japan") locale="ja_JP.UTF-8"; break ;;
            "Korean - Korea") locale="ko_KR.UTF-8"; break ;;
            "Malay - Malaysia") locale="ms_MY.UTF-8"; break ;;
            "Polish - Poland") locale="pl_PL.UTF-8"; break ;;
            "Russian - Russia") locale="ru_RU.UTF-8"; break ;;
            "Romanian - Romania") locale="ro_RO.UTF-8"; break ;;
            "Simplified Chinese - China") locale="zh_CN.UTF-8"; break ;;
            "Spanish - Spain") locale="es_ES.UTF-8"; break ;;
            "Swedish - Sweden") locale="sv_SE.UTF-8"; break ;;
            "Traditional Chinese - China") locale="zh_TW.UTF-8"; break ;;
            "Turkish - Turkey") locale="tr_TR.UTF-8"; break ;;
            #skip selecting locales
            "Quit") break ;;
            #if user input is not valid, then prompt user to select locales
            *) echo "Invalid option $REPLY, Please try again." ;;
        esac
    done
}

#set time zone automatically or manually
set_timezone() {
    #get time zone automatically using curl then goto "ipapi.co/timezone"
    timezone=$(curl https://ipapi.co/timezone)
    echo "Based on your location, the timezone is: $timezone"
    #choose "Yes" if the automatic time zone was correct; else "No" to manually type your time zone
    echo "Is this correct?"
    options=("Yes" "No")
    select option in "${options[@]}"
    do
        case $option in
            #use the automatic time zone
            "Yes") break ;;
            #set time zone manually by typing the region/city
            "No") read -p "Please enter your timezone (e.g. Africa/Addis_Ababa): " timezone; echo "Timezone set to $timezone."; break ;;
            #if user input is not valid, then prompt user to choose automatic or manual time zone
            *) echo "Invalid option $REPLY, Please try again." ;;
        esac
    done
}

#set hostname to uniquely identify your machine on a network
set_hostname() {
    #prompt user to type hostname
    read -p "Please enter your hostname: " hostname
    #check if the hostname/string is empty
    if [ -z "$hostname" ]; then
        echo "Hostname cannot be empty."
        #if the user didn't type hostname/empty the function calls itself directly (recursive function)
        set_hostname
    fi
}

#set disk for installation
set_disk() {
    #list of available disks on the system and filters the output to only include disk names
    disks=($(lsblk -d | tail -n+2 | awk '$6=="disk"' | cut -d " " -f1))
    #initializes an empty array to store the available disk options
    options=()
    #iterate over each element in the disks array
    for disk in "${disks[@]}"
    do
    	#appends each disk to the options array
    	options+=("$disk")
    done
    #prompt user to select a disk number from the list
    PS3="Please select a disk for installation: "
    #select a disk from the available options stored in the options array
    select disk_choice in "${options[@]}"
    do
    	#checks if the disk choice is not empty, indicating that a valid disk option has been selected
    	if [[ -n $disk_choice ]]; then
        	#breaks the loop if a valid disk option has been selected
        	break
    	#if user input is not valid, then prompt user to choose a disk only from the disk list
    	else
        	echo "Invalid option $REPLY, Please try again."
    	fi
    done
}

#set a graphics card driver
#NOTE: the function doesn't support hybrid graphics card laptops with intel and nvidia GPU for now
set_graphic() {
    #select graphics card automatically
    #run lspci command and filter the output for the graphics card
    graphic_card=$(lspci | grep -i 'VGA compatible controller')
    #extract the driver information from the output
    driver=$(echo "$graphic_card" | awk -F' ' '{print $5}')
    #print the automatic graphics card information; NOTE Advanced is for AMD
    echo "Based on your machine your graphic card is: $driver"
    #set graphic driver automatically
    set_driver_automatically() {
        #save selected graphic card to a variable for future use
        case "$driver" in
	    #virtual-machine/kvm graphic driver
	    "Device") graphic_driver="xf86-video-qxl" ;;
            #intel graphic driver
            "Intel") graphic_driver="xf86-video-intel" ;;
            #amd graphic driver
            "Advanced") graphic_driver="xf86-video-amdgpu" ;;
            #nvidia graphic driver
            "NVIDIA") graphic_driver="nvidia nvidia-utils nvidia-settings" ;;
            #if user input is not valid, then prompt user to select graphic driver
            *) echo "Invalid option $REPLY, Please try again." ;;
            esac
    }
    #set graphic driver manually
    set_driver_manually() {
        #prompt user to select a graphic driver
        PS3="Please select a graphic card: "
        #array that contains the available graphic driver for the user to choose
        options=("VM" "Intel" "AMD" "NVIDIA" "Quit")
        #the selected option(graphic driver) is stored in the "option" variable
        select option in "${options[@]}"
        do
            #save selected graphic card to a variable for future use
            case $option in
                #virtual-machine graphic driver
                "VM") graphic_driver="xf86-video-qxl"; break ;;
                #intel graphic driver
                "Intel") graphic_driver="xf86-video-intel"; break ;;
                #amd graphic driver
                "AMD") graphic_driver="xf86-video-amdgpu"; break ;;
                #nvidia graphic driver
                "NVIDIA") graphic_driver="nvidia nvidia-utils nvidia-settings"; break ;;
                ##skip selecting graphic driver
                "Quit") break ;;
                #if user input is not valid, then prompt user to select graphic driver
                *) echo "Invalid option $REPLY, Please try again." ;;
            esac
        done
    }
    #choose "Yes" if the automatic graphic card was correct; else "No" to manually set graphic card
    echo "Is this correct?"
    options=("Yes" "No")
    select option in "${options[@]}"
    do
        case $option in
            #use the automatic graphic card
            "Yes") set_driver_automatically; break ;;
            #set graphic card manually
            "No") set_driver_manually; break;;
            #if user input is not valid, then prompt user to choose automatic or manual graphic card
            *) echo "Invalid option $REPLY, Please try again." ;;
        esac
    done
}

#set a desktop environment or window manager (DE/WM)
set_graphical_interface() {
    #prompt user to select a desktop environment or window manager (DE/WM)
    PS3="Please select a desktop environment or window manager (DE/WM): "
    #array that contains the available desktop environment or window manager for the user to choose from
    options=("Minimal" "Server" "GNOME" "KDE" "Xfce" "Cinnamon" "MATE" "LXDE" "LXQt" "bspwm" "dwm" "i3" "Sway" "Hyprland" "Quit")
    #the selected option(Minimal/Server/DE/WM) is stored in the "option" variable
    select option in "${options[@]}"
    do
        #save selected graphical interface to a variable for future use
        case $option in
            #minimal install
            "Minimal") graphical_interface=$option; break ;;
            #server install
            "Server") graphical_interface=$option; break ;;
            #desktop environment/DE options
            "GNOME") graphical_interface=$option; break ;;
            "KDE") graphical_interface=$option; break ;;
            "Xfce") graphical_interface=$option; break ;;
            "Cinnamon") graphical_interface=$option; break ;;
            "MATE") graphical_interface=$option; break ;;
            "LXDE") graphical_interface=$option; break ;;
            "LXQt") graphical_interface=$option; break ;;
            #window manager/WM options
            "bspwm") graphical_interface=$option; break ;;
            "dwm") graphical_interface=$option; break ;;
            "i3") graphical_interface=$option; break ;;
            "Sway") graphical_interface=$option; break ;;
            "Hyprland") graphical_interface=$option; break ;;
            #skip setting graphical interface
            "Quit") break ;;
            #if user input is not valid, then prompt user to select graphical interface
            *) echo "Invalid option $REPLY, Please try again." ;;
        esac
    done
}

#set username for a new user
set_user() {
    #prompt user to type username
    read -p "Please enter your username: " user
    #remove spaces from the user string
    user=$(echo "$user" | tr -d ' ')
    #set a limit to the user string length; max 32 characters according to "useradd" man page
    user=${user:0:32}
    #check if the username/string is empty
    if [ -z "$user" ]; then
        echo "Username cannot be empty."
        #if the user didn't type username/empty the function calls itself directly (recursive function)
        set_user
    fi
}

#set password for the new user
set_password() {
    #prompt user to type password
    read -sp "Please enter your password: " password
    echo
    #prompt user to re-enter password
    read -sp "Please re-enter your password: " repassword
    echo
    #check if the password/string is empty
    if [ -z "$password" ] || [ -z "$repassword" ]; then
        echo "Password cannot be empty."
        #if the user didn't type password/empty; the function calls itself directly (recursive function)
        set_password
    #check if the password/string and repassword/string match
    elif [ "$password" != "$repassword" ]; then
        echo "Password doesn't match."
        #if the user's password didn't match; the function calls itself directly (recursive function)
        set_password
    #check if the password isn't empty and password and the re-enter password match
    else
        #set password
        password="$password"
        #set a limit to the password string length; no maximum limit on password length but for older or obsolete systems might have limits imposed by their password storage system; so we set a max 255 characters
        password=${password:0:255}
    fi
}

#checking your configuration
configuration() {
    #version number of the script
    VERSION="0.0.1"
    #returns machine hardware, kernel release and kernel name 
    DISTRO=$(uname -mrs)
    #print configuration
    printf "\nConfiguration\n
==============================================
Script Version | $VERSION
----------------------------------------------
Distro Info    | $DISTRO
User           | $user
Password       | $password
Hostname       | $hostname
Keyboard       | $keymap
Localization   | $locale
Timezone       | $timezone
Disk           | $disk_choice
GPU            | $graphic_driver
DE/WM          | $graphical_interface
==============================================\n"
    #choose "Yes" to continue with the script; else "No" to re-run the user-configuration
    read -p  "Is this correct? [Y/n]: " response
    if [[ $response =~ ^[Yy]$ || -z $response ]]; then
        return
    else
        call_func
    fi
}

#function calls
welcome_msg
call_func() {
    set_keymap
    check_internet
    set_locale
    set_timezone
    set_hostname
    set_disk
    set_graphic
    set_graphical_interface
    set_user
    set_password
    configuration
}
call_func

#2.pre-installation

#update the system clock
setup_clock() {
	#run "timedatectl" just to ensure the system clock is accurate; because the live environment "systemd-timesyncd" is enabled by default and time will be synced automatically once an internet connection is established; then hide the output of timedatectl from the user
	timedatectl > /dev/null
	echo -e "\nSystem clock uptodate!"
}

#partition, format and mount disk
setup_disk() {
    #add "/dev" to the disk choice eg. from sda or nvme0n1 to /dev/sda or /dev/nvme0n1
    DEVICE="/dev/$disk_choice"
    #1.partition the disk
    partition_disk() {
        #wipe partition table
	wipefs -a $DEVICE
        #create a GPT partition table
	parted -s $DEVICE mklabel gpt
        #create primary boot partition (EFI)
	parted -s $DEVICE mkpart primary fat32 1MiB 301MiB
        #create primary root partition
        parted -s $DEVICE mkpart primary ext4 301MiB 100%
        #set boot partition as ESP (EFI System Partition)
        parted -s $DEVICE set 1 esp on
        #print the partition table
        parted -s $DEVICE print
    }
    #2.format the partitions
    format_partitions() {
        #create an EFI file system
	yes | mkfs.fat -F  32  $DEVICE"$1"
        #create an ext4 root file system
	yes | mkfs.ext4 $DEVICE"$2"
    }
    #3.mount the file systems
    mount_filesystems() {
        #mount the root volume to /mnt
        mount $DEVICE"$2" /mnt
        #mount the EFI volume to /mnt/boot
        mount --mkdir $DEVICE"$1" /mnt/boot && lsblk
    }
    #if the disk choice was a HDD or SSD eg. sda
    if [[ $disk_choice == sd* ]]; then
        #wipe and create a GPT partition table; finally create a boot and root partition
        partition_disk
        #format the boot and root file system; pass "1" and "2" as arguments for the format_partitions function as /dev/sdX1 and /dev/sdX2
        format_partitions "1" "2"
        #mount the root and boot volume; pass "1" and "2" as arguments for the mount_filesystems function as /dev/sdX1 and /dev/sdX2
        mount_filesystems "1" "2"
    #if the disk choice was NVMe eg. nvme0n1
    elif [[ $disk_choice == nvme* ]]; then
        #wipe and create a GPT partition table; finally create a boot and root partition
        partition_disk
        #format the boot and root file system; pass "p1" and "p2" as arguments for the format_partitions function as /dev/nvmeXn1p1 and /dev/nvmeXn1p2
        format_partitions "p1" "p2"
        #mount the root and boot volume; pass "p1" and "p2" as arguments for the mount_filesystems function as /dev/nvmeXn1p1 and /dev/nvmeXn1p2
        mount_filesystems "p1" "p2"
    fi
}

#function calls
setup_clock
setup_disk

#3.installation

#select the mirrors
setup_mirrors() {
    #sort the latest HTTP mirrors from 15 mirror servers by speed and save the mirrorlist for faster packages download using the reflector package
    reflector --verbose --sort rate -l 15 --save /etc/pacman.d/mirrorlist
    echo -e "\nMirror list uptodate!"
}

#edit the pacman package manager
edit_pacman() {
    #add color and enable parallel downloads to pacman package manager
    sed -i 's/#Color/Color/' /etc/pacman.conf && sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 5/' /etc/pacman.conf
}

#function calls
setup_mirrors
edit_pacman
